public class CustomerConfiguration : IEntityTypeConfiguration<Customer>
{
    public void Configure(EntityTypeBuilder<Customer> builder)
    {
        builder.ToTable("Customers");

        builder.Property(c => c.Id).HasColumnName("Id");
        builder.Property(c => c.UserName).HasColumnName("UserName");
        builder.Property(c => c.Email).HasColumnName("Email");
        builder.Property(c => c.PhoneNumber).HasColumnName("PhoneNumber");
        builder.Property(c => c.FirstName).HasColumnName("FirstName");
        builder.Property(c => c.LastName).HasColumnName("LastName");
        builder.Property(c => c.EnrollmentDate).HasColumnType("datetime").HasDefaultValue(DateTime.UtcNow).HasColumnName("EnrollmentDate");
        builder.Property(c => c.LastLogin).HasColumnName("LastLogin");

        builder.Property(c => c.Title).IsRequired().HasColumnName("Title");
        builder.Property(c => c.BirthDate).HasColumnType("datetime").HasColumnName("BirthDate");
        builder.Property(c => c.AddressId).HasColumnName("AddressId");
        builder.Property(c => c.CompanyId).HasColumnName("CompanyId");

        builder.HasMany(c => c.Orders)
            .WithOne(o => o.Customer)
            .HasForeignKey(o => o.CustomerId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasOne(c => c.Address)
            .WithOne()
            .HasForeignKey<Customer>(c => c.AddressId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasOne(c => c.Company)
            .WithMany(c => c.Representatives)
            .HasForeignKey(c => c.CompanyId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasIndex(u => u.Email).IsUnique();
    }
}

public class EmployeeConfiguration : IEntityTypeConfiguration<Employee>
{
    public void Configure(EntityTypeBuilder<Employee> builder)
    {
        builder.ToTable("Employees");

        builder.Property(u => u.UserName).IsRequired();
        builder.Property(u => u.Email).IsRequired();
        builder.Property(u => u.PhoneNumber);
        builder.Property(u => u.FirstName).IsRequired();
        builder.Property(u => u.LastName).IsRequired();
        builder.Property(u => u.EnrollmentDate).HasColumnType("datetime").HasDefaultValue(DateTime.UtcNow);
        builder.Property(u => u.LastLogin).HasColumnType("datetime");

        builder.Property(e => e.Salary).HasColumnType("decimal(18,2)");
        builder.Property(e => e.TerminationDate).HasColumnType("datetime");

        builder.HasMany(e => e.Orders)
            .WithOne(e => e.Employee)
            .HasForeignKey(o => o.EmployeeId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasOne(c => c.Address)
            .WithOne()
            .HasForeignKey<Employee>(c => c.AddressId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.HasIndex(u => u.Email).IsUnique();
    }
}